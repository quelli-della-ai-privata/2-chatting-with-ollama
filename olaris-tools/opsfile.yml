version: 3

tasks:

  run:
    silent: false
    desc: initialize the project
    cmds:
      - |
        args={{._args_}} 
        # exanded and assigned to positional parameter
        set -- ${args[@]}
        # removing the '--' at the beginning required to pass extra flags
        test "$1" = "--" && shift
        uv run "$@"

  test:
    silent: false
    desc: initialize the project
    cmds:
      - |
        args={{._args_}}
        # exanded and assigned to positional parameter
        set -- ${args[@]}
        # removing the '--' at the beginning required to pass extra flags
        test "$1" = "--" && shift
        uv run pytest $OPS_PWD/tests "$@"


  cli:
    silent: true
    desc: run cli commands
    cmds:
      - |
        export IPYTHONDIR=$(pwd)
        uv run ipython
  
  user:
    silent: true
    desc: manage users
    cmds:
      - |
        uv run user.py "{{._user_}}" "{{.__add}}" "{{.__remove}}" "{{.__update}}" 

  new:
    silent: true
    desc: generate a new python action
    env:
       ACTION: "{{._action_}}"
       PACKAGE: "{{or ._package_ ._action_}}"
       DIR:  "packages/{{or ._package_ ._action_}}/{{._action_}}"
       FILE: "packages/{{or ._package_ ._action_}}/{{._action_}}/{{._action_}}.py"
    cmds:
    - test ! -e "$OPS_PWD/$FILE" || die "file already exists"
    - |
      mkdir -p $OPS_PWD/tests/$PACKAGE
      mkdir -p $OPS_PWD/$DIR
    - |
      cat <<EOF >$OPS_PWD/$FILE
      def $ACTION(args):
        return { "output": "$ACTION" }
      EOF
    - |
      cat <<EOF >$OPS_PWD/$DIR/__main__.py
      #--kind python:default
      #--web true
      import $ACTION
      def main(args):
        return { "body": $ACTION.$ACTION(args) }
      EOF
    - |
      cat <<EOF >$OPS_PWD/tests/$PACKAGE/test_${ACTION}.py
      import sys 
      sys.path.append("$DIR")
      import $ACTION
      
      def test_$ACTION():
          res = $ACTION.$ACTION({})
          assert res["output"] == "$ACTION"
      EOF
    - |
      cat <<EOF >$OPS_PWD/tests/$PACKAGE/test_${ACTION}_int.py
      import os, requests as req
      def test_$ACTION():
          url = os.environ.get("OPSDEV_HOST", "") + "/api/my/$PACKAGE/$ACTION"
          res = req.get(url).json()
          assert res.get("output") == "$ACTION"
      EOF

  